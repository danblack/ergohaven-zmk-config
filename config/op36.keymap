#include "keys_ru.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        mosk: mosk {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&mo>, <&sk>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
            label = "MOSK";
        };

        mosl: mosl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&mo>, <&sl>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
            label = "MOSL";
        };
    };

    combos { compatible = "zmk,combos"; };

    macros {
        RUEN: RUEN {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT &kp LEFT_ALT &kp LEFT_CONTROL &kp LEFT_GUI &kp R>,
                <&macro_wait_time 20>,
                <&macro_release>,
                <&kp R &kp LEFT_GUI &kp LEFT_CONTROL &kp LEFT_ALT &kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_wait_time 20>,
                <&macro_press>,
                <&kp LEFT_SHIFT &kp LEFT_ALT &kp LEFT_CONTROL &kp LEFT_GUI &kp E>,
                <&macro_wait_time 20>,
                <&macro_release>,
                <&kp E &kp LEFT_GUI &kp LEFT_CONTROL &kp LEFT_ALT &kp LEFT_SHIFT>;

            label = "RUEN";
        };

        RU_LESS: RU_LESS {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(LG(E)))) &kp LS(A) &kp LS(LA(LC(LG(R))))>;
            label = "RU_LESS";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        KAN {
            bindings = <
  &lt 1 Q  &kp W  &kp E  &kp R       &kp T                                    &kp Y           &kp U             &kp I      &kp O    &kp P
  &kp A    &kp S  &kp D  &kp F       &kp G                                    &kp H           &kp J             &kp K      &kp L    &kp SEMI
  &kp Z    &kp X  &kp C  &kp V       &kp B                                    &kp N           &kp M             &kp COMMA  &kp DOT  &kp FSLH
                         &kp ESCAPE  &kp SPACE  &kp LEFT_GUI    &kp LEFT_ALT  &kp LEFT_SHIFT  &kp LEFT_CONTROL
            >;

            display-name = "Kanata";
        };

        SETUP {
            bindings = <
  &none        &none  &none  &none   &none                    &bt BT_SEL 0  &bt BT_SEL 1         &bt BT_SEL 2       &bt BT_SEL 3        &bt BT_CLR
  &none        &none  &none  &none   &none                    &out OUT_BLE  &hmr RCTRL C_VOL_DN  &hmr RSHFT C_MUTE  &hmr LALT C_VOL_UP  &kp RGUI
  &bootloader  &none  &none  &none   &kp Z                    &out OUT_USB  &kp C_PREV           &kp C_PP           &kp C_NEXT          &studio_unlock
                             &trans  &trans  &to 2    &trans  &trans        &trans
            >;

            display-name = "Setup";
        };

        ENG {
            display-name = "English";
            bindings = <
  &kp Q  &kp W  &kp E  &kp R        &kp T                                              &kp Y               &kp U                  &kp I      &kp O    &kp P
  &kp A  &kp S  &kp D  &kp F        &kp G                                              &kp H               &kp J                  &kp K      &kp L    &kp SEMI
  &kp Z  &kp X  &kp C  &kp V        &kp B                                              &kp N               &kp M                  &kp COMMA  &kp DOT  &kp FSLH
                       &mosl 12 13  &lt 4 SPACE  &mosk 7 LEFT_GUI    &mosk 5 LEFT_ALT  &mosk 9 LEFT_SHIFT  &mosk 11 LEFT_CONTROL
            >;
        };

        RUS {
            display-name = "Russian";
            bindings = <
  &kp Q  &kp W  &kp E  &kp R        &mt NUBS T                                         &kp Y                &kp U                  &mt O I    &kp P    &kp RIGHT_BRACKET
  &kp A  &kp S  &kp D  &kp F        &kp G                                              &kp H                &kp J                  &kp K      &kp L    &kp SEMI
  &kp Z  &kp X  &kp C  &kp V        &kp B                                              &kp N                &mt RIGHT_BRACKET M    &kp COMMA  &kp DOT  &kp SQT
                       &mosl 12 13  &lt 4 SPACE  &mosk 8 LEFT_GUI    &mosk 6 LEFT_ALT  &mosk 10 LEFT_SHIFT  &mosk 11 LEFT_CONTROL
            >;
        };

        NAV {
            bindings = <
  &kp LG(LS(Z))     &kp LG(X)       &kp LG(C)     &kp LG(V)         &kp LC(LS(V))                    &none          &kp HOME        &kp UP      &kp END     &kp PAGE_UP
  &sk LEFT_CONTROL  &sk LEFT_SHIFT  &sk LEFT_ALT  &sk LEFT_GUI      &kp LG(Z)                        &kp BACKSPACE  &kp LEFT_ARROW  &kp DOWN    &kp RIGHT   &kp PAGE_DOWN
  &none             &none           &kp LG(A)     &sk LEFT_CONTROL  &none                            &kp CAPSLOCK   &none           &kp ESCAPE  &kp DELETE  &none
                                                  &none             &trans         &none    &kp TAB  &kp ENTER      &none
            >;

            display-name = "Navigation";
        };

        LSM_EN {
            bindings = <
  &kp LS(N6)            &kp LS(N7)         &kp LS(N8)        &kp LS(NUMBER_2)   &kp LS(GRAVE)                                   &none          &none  &none  &none  &none
  &kp LS(LEFT_BRACKET)  &kp LEFT_BRACKET   &kp LS(NUMBER_5)  &kp RIGHT_BRACKET  &kp LS(RIGHT_BRACKET)                           &kp BACKSPACE  &none  &none  &none  &none
  &none                 &kp LS(BACKSLASH)  &kp LS(NUMBER_4)  &kp BACKSLASH      &none                                           &none          &none  &none  &none  &to 0
                                                             &kp LS(NUMBER_3)   &kp LS(N1)             &kp LS(MINUS)    &trans  &none          &none
            >;

            label = "LSM_EN";
        };

        LSM_RU {
            bindings = <
  &RUEN LS(N6)          &RUEN LS(N7)         &RUEN LS(N8)        &RUEN LS(NUMBER_2)   &RUEN LS(GRAVE)                                 &none          &none  &none  &none  &none
  &kp LS(LEFT_BRACKET)  &RUEN LEFT_BRACKET   &RUEN LS(NUMBER_5)  &RUEN RIGHT_BRACKET  &kp LS(RIGHT_BRACKET)                           &kp BACKSPACE  &none  &none  &none  &none
  &trans                &RUEN LS(BACKSLASH)  &RUEN LS(NUMBER_4)  &RUEN BACKSLASH      &trans                                          &none          &none  &none  &none  &to 0
                                                                 &RUEN LS(NUMBER_3)   &kp LS(N1)             &kp LS(MINUS)    &trans  &none          &none
            >;
        };

        RSM_EN {
            bindings = <
  &none  &none  &none  &none  &none                                   &kp LS(COMMA)          &kp DQT       &kp LS(N1)  &kp GRAVE         &none
  &none  &none  &none  &none  &none                                   &kp BACKSPACE          &kp COLON     &kp EQUAL   &kp SINGLE_QUOTE  &kp SEMI
  &none  &none  &none  &none  &none                                   &kp LS(DOT)            &kp LS(FSLH)  &kp COMMA   &kp DOT           &kp FSLH
                       &none  &none  &trans    &kp LS(LA(LC(LG(R))))  &kp LS(LA(LC(LG(E))))  &none
            >;
        };

        RSM_RU {
            bindings = <
  &none  &none  &none  &none  &none                                   &RUEN LS(COMMA)        &RUEN DQT     &kp LS(N1)   &RUEN GRAVE         &none
  &none  &none  &none  &none  &none                                   &kp BACKSPACE          &RUEN COLON   &kp EQUAL    &RUEN SINGLE_QUOTE  &RUEN SEMI
  &none  &none  &none  &none  &none                                   &RUEN LS(DOT)          &kp LS(FSLH)  &RUEN COMMA  &RUEN DOT           &kp FSLH
                       &none  &none  &trans    &kp LS(LA(LC(LG(R))))  &kp LS(LA(LC(LG(E))))  &none
            >;
        };

        NUM_EN {
            bindings = <
  &none       &kp N7  &kp N8  &kp N9    &kp N0                          &none          &kp LS(COMMA)     &none         &kp LS(DOT)     &none
  &kp LS(N9)  &kp N4  &kp N5  &kp N6    &kp LS(N0)                      &kp BACKSPACE  &sk LEFT_GUI      &sk LEFT_ALT  &sk LEFT_SHIFT  &sk LEFT_CONTROL
  &none       &kp N1  &kp N2  &kp N3    &kp DOT                         &none          &sk LEFT_CONTROL  &kp COMMA     &kp DOT         &none
                              &kp PLUS  &kp MINUS   &kp EQUAL    &none  &none          &none
            >;
        };

        NUM_RU {
            bindings = <
  &none       &kp N7  &kp N8  &kp N9    &kp N0                          &kp A          &RU_LESS          &none         &RUEN LS(DOT)   &none
  &kp LS(N9)  &kp N4  &kp N5  &kp N6    &kp LS(N0)                      &kp BACKSPACE  &sk LEFT_GUI      &sk LEFT_ALT  &sk LEFT_SHIFT  &sk LEFT_CONTROL
  &none       &kp N1  &kp N2  &kp N3    &RUEN DOT                       &none          &sk LEFT_CONTROL  &RUEN COMMA   &RUEN DOT       &none
                              &kp PLUS  &kp MINUS   &kp EQUAL    &none  &none          &none
            >;
        };

        FUN {
            bindings = <
  &kp F12  &kp F7  &kp F8  &kp F9  &none                  &none  &none             &none         &none           &none
  &kp F11  &kp F4  &kp F5  &kp F6  &none                  &none  &kp LEFT_GUI      &kp LEFT_ALT  &kp LEFT_SHIFT  &kp LEFT_CONTROL
  &kp F10  &kp F1  &kp F2  &kp F3  &none                  &none  &kp LEFT_CONTROL  &none         &none           &none
                           &none   &none  &none    &none  &none  &none
            >;
        };

        APP {
            bindings = <
  &trans  &trans  &trans  &trans  &trans                    &trans          &kp LG(LA(ESCAPE))  &kp LG(LA(N0))  &trans          &kp LC(LG(SPACE))
  &trans  &trans  &trans  &trans  &trans                    &kp LG(LA(F1))  &kp LG(LA(F2))      &kp LG(LA(F3))  &kp LG(LA(F4))  &kp LG(LA(F5))
  &trans  &trans  &trans  &trans  &trans                    &kp LA(LG(F6))  &kp LA(LG(F7))      &kp LA(LG(F8))  &kp LA(LG(F9))  &kp LA(LG(F10))
                          &trans  &trans  &trans    &trans  &trans          &trans
            >;
        };

        IDE {
            bindings = <
  &none            &none  &kp LC(F1)     &kp LC(LA(R))  &kp LC(LG(LA(T)))                  &kp LG(F2)  &kp LA(F7)     &kp LG(LA(B))  &none          &kp LG(F8)
  &kp LG(LS(A))    &none  &kp LG(O)      &kp LG(LS(F))  &kp LS(LG(O))                      &none       &kp LC(LS(J))  &none          &kp LG(LC(L))  &none
  &kp LS(LG(F12))  &none  &kp LG(LA(C))  &kp LG(LA(V))  &none                              &kp LS(F6)  &kp LG(LA(M))  &none          &none          &none
                                         &none          &none              &none    &none  &none       &none
            >;
        };
    };
};
